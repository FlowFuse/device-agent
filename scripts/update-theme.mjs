import * as url from 'url'
import { existsSync, createWriteStream, mkdirSync } from 'fs'
import fsp from 'fs/promises'
import path from 'path'
import { execSync } from 'child_process'
import got from 'got'
import tar from 'tar'
import { promisify } from 'util'

// setup constants
const __dirname = url.fileURLToPath(new URL('..', import.meta.url))
const packageDirectory = __dirname
const tempDirectory = path.join(packageDirectory, 'temp')
const outputDirectory = path.join(packageDirectory, 'theme')
const outputSrcDirectory = path.join(outputDirectory, 'lib/theme')
const resources = 'resources'
const outputResourceDest = path.join(outputDirectory, resources)
const repositoryLocalRelative = '../flowforge-nr-launcher'
const repositoryLocal = path.join(packageDirectory, repositoryLocalRelative)
const repositoryUser = 'flowforge'
const repositoryName = 'flowforge-nr-launcher'
const NPMPackageName = '@flowforge/nr-launcher'
const fileSpec = ['package/lib/theme', 'package/resources', 'package/package.json']
const repositoryUrl = `https://github.com/${repositoryUser}/${repositoryName}`
const repositoryPath = 'lib/theme'
let readmeFooter = 'These files were auto generated'

// Main
console.log('################################################################################')
console.log('###                             Update theme files.                          ###')
console.log('################################################################################')
await cleanUp(tempDirectory)
await cleanUp(outputDirectory)
console.log(`Checking local directory '${repositoryLocalRelative}' for theme files`)
if (existsSync(repositoryLocal)) {
    console.log('Copying theme files from local directory')
    const themeSource = path.join(repositoryLocal, repositoryPath)
    const resourceSource = path.join(repositoryLocal, resources)
    const pkg = JSON.parse(await fsp.readFile(path.join(repositoryLocal, 'package.json')))
    await fsp.cp(themeSource, outputSrcDirectory, { recursive: true })
    await fsp.cp(resourceSource, outputResourceDest, { recursive: true })
    readmeFooter += ` from a local install of [${repositoryUser}/${repositoryName}](${repositoryUrl}), version: ${pkg.version}`
} else {
    console.log('Local install not found')
    console.log(`Downloading files from NPM repository '${NPMPackageName}'`)
    // create temp directory if it doesn't exist
    ensureDirectoryExists(tempDirectory)

    await downloadAndExtract({ packageName: NPMPackageName, filesToExtract: fileSpec, tempDirectory, finalDirectory: outputDirectory })

    console.log('Copying theme files from downloaded repository')
    ensureDirectoryExists(outputDirectory)
    const packageSource = path.join(tempDirectory, 'package')
    const themeSource = path.join(packageSource, repositoryPath)
    const resourceSource = path.join(packageSource, resources)
    await fsp.cp(themeSource, outputSrcDirectory, { recursive: true })
    if (existsSync(resourceSource)) {
        await fsp.cp(resourceSource, outputResourceDest, { recursive: true })
    }
    const pkg = JSON.parse(await fsp.readFile(path.join(packageSource, 'package.json')))
    readmeFooter += ` from '${NPMPackageName}', version: ${pkg.version})`
}
await cleanUp(tempDirectory)
console.log('Writing README.md')
await writeReadme(outputDirectory, readmeFooter)
console.log('Writing package.json')
writePackageFile(outputDirectory)

// final clean up - remove any files that should not be in the final directory
await cleanUp(path.join(outputSrcDirectory, 'scripts'))
await cleanUp(path.join(outputSrcDirectory, 'README.md'))
await cleanUp(path.join(outputSrcDirectory, 'forge-light/forge-light-theme.scss'))
await cleanUp(path.join(outputSrcDirectory, 'forge-dark/forge-dark-theme.scss'))

// done
console.log('Theme files updated')
console.log('################################################################################')

async function writeReadme (dir, footer) {
    const readmePath = path.join(dir, 'README.md')
    const readme = []
    readme.push('**DO NOT MODIFY THESE FILES DIRECTLY**\n\n')
    readme.push('This directory contains the flowforge theme files for Node-RED\n\n')
    readme.push('All files in this directory are generated by the script `scripts/update_theme.js`\n\n')
    readme.push('To update the theme, run `npm run update-theme`\n\n')
    if (footer) {
        readme.push(footer)
    }
    readme.push('\n')
    await fsp.writeFile(readmePath, readme)
}

async function writePackageFile (dir) {
    const packagePath = path.join(dir, 'package.json')
    const pkgData = {
        name: '@flowforge/flowforge-nr-theme',
        version: '0.0.0',
        description: 'FlowForge themes for Node-RED',
        info: 'This package was generated by the script `flowforge-device-agent/scripts/update_theme.mjs`',
        license: 'Apache-2.0',
        'node-red': {
            version: '>=2.2.0',
            plugins: {
                'forge-light': 'lib/theme/forge-light/forge-light.js',
                'forge-dark': 'lib/theme/forge-dark/forge-dark.js'
            }
        },
        engines: {
            node: '>=16.x'
        }
    }
    await fsp.writeFile(packagePath, JSON.stringify(pkgData, null, 4))
}
async function cleanUp (path) {
    if (!existsSync(path)) return
    // if it is a file, delete it using fs.unlink otherwise use fs.rm
    const stat = await fsp.stat(path)
    if (stat.isFile()) {
        await fsp.unlink(path)
        return
    }
    await fsp.rm(path, { recursive: true })
}

async function downloadAndExtract ({ packageName, filesToExtract, tempDirectory }) {
    const npmCMD = `npm view ${packageName} dist.tarball`
    console.log(`Running: ${npmCMD}`)
    const result = execSync(npmCMD)
    const tarballURL = result.toString().trim()

    const tarFilePath = path.join(tempDirectory, 'package.tgz')
    const response = await got.stream(tarballURL)
    await new Promise((resolve, reject) => {
        response
            .pipe(createWriteStream(tarFilePath))
            .on('finish', resolve)
            .on('error', reject)
    })

    console.log('Tar file downloaded successfully.')

    await extractSpecificFiles(tarFilePath, filesToExtract, tempDirectory)

    console.log('Files extracted successfully.')
}

async function extractSpecificFiles (tarFilePath, filesToExtract, destinationDir) {
    /** @type {tar.ExtractOptions} */
    const extractOptions = {
        file: tarFilePath,
        cwd: destinationDir
    }

    // promisify the tar.x function
    const tarX = tar.x
    tarX[Symbol.toStringTag] = 'tar.x'
    const tarXAsync = promisify(tarX)
    await tarXAsync(extractOptions, filesToExtract)
}

function ensureDirectoryExists (filePath) {
    if (!existsSync(filePath)) {
        mkdirSync(filePath, { recursive: true })
    }
}
