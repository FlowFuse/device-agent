name: Installer Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (no actual release)'
        type: boolean
        default: false
        required: false

env:
  GO_VERSION: '1.21'

permissions:
  contents: write
  issues: write 
  pull-requests: write

jobs:
  calculate-version:
    name: Calculate Release Version
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./installer/go
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      new-release-published: ${{ steps.semantic.outputs.new_release_published }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
      with:
        node-version: '20'
        
    - name: Calculate next version
      id: semantic
      uses: cycjimmy/semantic-release-action@cb425203a562475bca039ba4dbf90c7f9ac790f4 # v4.1.1
      with:
        semantic_version: 23.0.3
        working_directory: ./installer/go
        extra_plugins: |
          @semantic-release/changelog@6.0.3
          @semantic-release/github@10.0.7
        dry_run: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-artifacts:
    name: Build Multi-Platform Binaries
    runs-on: ubuntu-latest
    needs: calculate-version
    if: needs.calculate-version.outputs.new-release-published == 'true' || github.event.inputs.dry_run == 'true'
    defaults:
      run:
        working-directory: ./installer/go
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: flowfuse-device-installer-linux-amd64
          - goos: linux
            goarch: arm64
            output: flowfuse-device-installer-linux-arm64
          - goos: linux
            goarch: arm
            output: flowfuse-device-installer-linux-arm
          - goos: windows
            goarch: amd64
            output: flowfuse-device-installer-windows-amd64.exe
          - goos: darwin
            goarch: amd64
            output: flowfuse-device-installer-macos-amd64
          - goos: darwin
            goarch: arm64
            output: flowfuse-device-installer-macos-arm64

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.cache/go-build
          ~/instaler/go
        key: ${{ runner.os }}-go-${{ hashFiles('installer/go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
        
    - name: Build binary for ${{ matrix.goos }}/${{ matrix.goarch }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ needs.calculate-version.outputs.version }}
      run: |
        echo "Building ${{ matrix.output }} for ${{ matrix.goos }}/${{ matrix.goarch }}..."
        echo "Using version: ${VERSION:-${{ github.sha }}}"
        
        # Create output directory structure
        mkdir -p artifacts
        
        # Build with version from semantic-release
        go build -ldflags "-X main.version=${VERSION:-${{ github.sha }}} -s -w" -o artifacts/${{ matrix.output }} main.go
        
        # Verify the binary was created
        if [ ! -f "artifacts/${{ matrix.output }}" ]; then
          echo "❌ Binary was not created: ${{ matrix.output }}"
          exit 1
        fi
        
        echo "✅ Binary created: ${{ matrix.output }}"
        ls -la artifacts/${{ matrix.output }}
        
        # Test the version output (only for native builds to avoid cross-compilation issues)
        if [[ "${{ matrix.goos }}" == "linux" && "${{ matrix.goarch }}" == "amd64" ]]; then
          echo "Testing version output:"
          ./artifacts/${{ matrix.output }} --version || echo "Version test completed"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: ${{ matrix.output }}
        path: installer/go/artifacts/${{ matrix.output }}
        retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [calculate-version, build-artifacts]
    if: needs.calculate-version.outputs.new-release-published == 'true' && github.event.inputs.dry_run != 'true'
    defaults:
      run:
        working-directory: ./installer/go
    
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0 # Required for semantic-release to analyze full commit history
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
      with:
        node-version: '20'
        
    - name: Download all artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        path: artifacts
        pattern: flowfuse-device-installer-*
        merge-multiple: true
        
    - name: Prepare artifacts for release
      run: |
        echo "Preparing release artifacts..."
        mkdir -p release-artifacts
        
        # Move and verify all artifacts
        find ../../artifacts -name "flowfuse-device-installer-*" -type f -exec cp {} release-artifacts/ \;
        
        echo "Available artifacts:"
        ls -la release-artifacts/
        
        # Verify we have all expected binaries
        expected_files=(
          "flowfuse-device-installer-linux-amd64"
          "flowfuse-device-installer-linux-arm64"
          "flowfuse-device-installer-linux-arm"
          "flowfuse-device-installer-windows-amd64.exe"
          "flowfuse-device-installer-macos-amd64"
          "flowfuse-device-installer-macos-arm64"
        )
        
        missing_files=()
        for file in "${expected_files[@]}"; do
          if [ ! -f "release-artifacts/$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing expected artifacts:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "✅ All expected artifacts are present"
        
    - name: Perform release
      uses: cycjimmy/semantic-release-action@cb425203a562475bca039ba4dbf90c7f9ac790f4 # v4.1.1
      with:
        semantic_version: 23.0.3
        working_directory: ./installer/go
        extra_plugins: |
          @semantic-release/changelog@6.0.3
          @semantic-release/github@10.0.7
        dry_run: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
